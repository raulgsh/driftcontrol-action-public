# DriftControl Configuration File Example
# Place this file at .github/driftcontrol.yml in your repository
#
# This file centralizes all DriftControl configuration options.
# Configuration precedence: action.yml inputs > driftcontrol.yml > defaults

# =============================================================================
# ANALYSIS CONFIGURATION
# Configure which files and patterns to analyze for drift detection
# All settings are optional - action.yml inputs take priority over these values
# =============================================================================
analysis:
  # OpenAPI specification file path
  openapi_path: 'openapi.yaml'
  
  # SQL migration files glob pattern
  sql_glob: 'migrations/**/*.sql'
  
  # Terraform plan JSON file path (optional)
  terraform_plan_path: ''
  
  # CloudFormation template files glob pattern (optional)
  cloudformation_glob: ''
  
  # General configuration YAML files glob pattern (optional)
  config_yaml_glob: ''
  
  # Feature flags configuration file path (optional)  
  feature_flags_path: ''
  
  # Kubernetes manifest files glob pattern
  kubernetes_glob: '**/k8s/**/*.{yaml,yml}'
  
  # Analyze .env files for secret changes
  env_files: true

# =============================================================================
# RISK ASSESSMENT CONFIGURATION
# Configure severity thresholds and blocking behavior
# =============================================================================
risk:
  # Fail the check on medium-severity drift (boolean)
  fail_on_medium: false
  
  # Cost increase threshold in USD to trigger medium severity
  cost_threshold: 1000
  
  # Allow bypassing merge blocks (boolean)
  override: false

# =============================================================================
# LLM INTEGRATION CONFIGURATION  
# Configure AI-powered enhanced explanations (optional)
# Note: API keys should still be provided via GitHub secrets in workflow files
# =============================================================================
llm:
  # LLM provider: 'openai' or 'anthropic' (leave empty to disable)
  provider: ''
  
  # Model to use: 'gpt-4', 'gpt-3.5-turbo', 'claude-3-opus', 'claude-3-sonnet'
  model: ''
  
  # Maximum tokens for LLM response
  max_tokens: 150

# =============================================================================
# VULNERABILITY DETECTION CONFIGURATION
# Configure how security vulnerabilities are detected
# =============================================================================
vulnerability:
  # Vulnerability detection provider: 'static' or 'github'
  provider: 'static'

# =============================================================================
# CORRELATION RULES CONFIGURATION  
# Define explicit relationships between API endpoints, database tables, and infrastructure
# These rules override heuristic correlations with confidence 1.0
# =============================================================================

# User-defined correlation rules for explicit relationship mappings
correlation_rules:
  # Map API endpoints to database tables (simple format)
  - type: api_to_db
    api_endpoint: /v1/users/{userId}
    db_table: application_users
    description: "Maps the public user API to the internal user table"
  
  # Method-aware API to database mapping (recommended for REST APIs)
  - type: api_to_db
    api:
      method: GET
      route: /v1/posts
    db_table: blog_posts
    description: "Maps GET requests for posts to posts table"
  
  - type: api_to_db
    api:
      method: POST
      route: /v1/posts
    db_table: blog_posts
    description: "Maps POST requests for creating posts"
  
  - type: api_to_db
    api_endpoint: /v1/orders/{orderId}
    db_table: customer_orders
    description: "Maps order API to orders table"
  
  # Map Infrastructure as Code resources to configuration files
  - type: iac_to_config
    iac_resource_id: aws_lambda_function.user_profile_processor
    config_file: services/user-profile/config.json
    description: "Lambda function uses user profile service configuration"
  
  - type: iac_to_config
    iac_resource_id: aws_s3_bucket.static_assets
    config_file: config/cdn.yaml
    description: "S3 bucket configuration for CDN"
  
  # Ignore known irrelevant correlations to reduce noise
  - type: ignore
    source: package-lock.json
    target: openapi.yml
    reason: "Dependency updates rarely impact the API spec directly"
  
  - type: ignore
    source: .github/workflows
    target: migrations
    reason: "CI/CD changes don't affect database migrations"
  
  - type: ignore
    source: README.md
    target: src
    reason: "Documentation changes don't affect source code"

# =============================================================================
# USAGE EXAMPLES
# =============================================================================
#
# Minimal workflow with centralized config:
#   - uses: your-org/driftcontrol-action@v1
#     with:
#       token: ${{ github.token }}
#       llm_api_key: ${{ secrets.OPENAI_API_KEY }}  # Only if LLM is configured above
#
# All other settings will be read from this file, eliminating workflow clutter!
#
# Benefits of using this configuration file:
# - Cleaner workflow files (one line vs 24+ action inputs)
# - Project-wide configuration that lives with your code
# - Version controlled alongside your repository
# - Easy team collaboration on DriftControl settings
# - Full backward compatibility - existing workflows continue working
